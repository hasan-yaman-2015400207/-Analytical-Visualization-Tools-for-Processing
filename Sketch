//Table uniqueUserTable;
Table libraryTable;
Table modesTable;
Table toolsTable;
Table examplesTable;

ArrayList<Data> libraries;
ArrayList<Data> modes;
ArrayList<Data> tools;
ArrayList<Data> examples;

int totalCounters[] = new int[4];

int centerX = 220;
int centerY = 250;
int r = 400;
int semiR = 200;

PFont font;

color c1 = color(64, 75, 105);
color c2 = color(218, 4, 99);
color c3 = color(236, 119, 0);
color c4 = color(112, 212, 180);
color c5 = color(252, 68, 66);
color c6 = color(234, 143, 121);

color colors[] = {c1, c2, c3, c4, c5, c6};

int colorsSize = 6;

int informationX = 480;
int informationRightX = informationX + 150;

int currentSelectedIndex = 0; // default!

void setup() {
  size(1000, 800);
  background(248, 241, 229);

  libraries = new ArrayList<Data>();
  modes = new ArrayList<Data>();
  tools = new ArrayList<Data>();
  examples = new ArrayList<Data>();

  font = createFont("Georgia", 16, true);

  //uniqueUserTable = loadTable("http://download.processing.org/stats/manager", "tsv");
  libraryTable = loadTable("http://download.processing.org/stats/libraries", "tsv");
  modesTable = loadTable("http://download.processing.org/stats/modes", "tsv");
  toolsTable = loadTable("http://download.processing.org/stats/tools", "tsv");
  examplesTable = loadTable("http://download.processing.org/stats/examples", "tsv");

  loadDataToList(libraries, libraryTable, 600, 0);
  loadDataToList(modes, modesTable, 300, 1);
  loadDataToList(tools, toolsTable, 300, 2);
  loadDataToList(examples, examplesTable, 300, 3);
}

void draw() {

  if (currentSelectedIndex == 0) {
    showSelectedMode(libraries);
  } else if (currentSelectedIndex == 1) {
    showSelectedMode(modes);
  } else if (currentSelectedIndex == 2) {
    showSelectedMode(tools);
  } else if (currentSelectedIndex == 3) {
    showSelectedMode(examples);
  }

  fill(248, 241, 229);
  if (currentSelectedIndex == 0) {
    fill(255);
  }
  
  // Libraries button
  stroke(159, 96, 156);
  strokeWeight(2);
  rect(20, 480, 140, 60, 10, 10, 10, 10);
  textFont(font, 18);
  fill(159, 96, 156);
  text("Libraries", 55, 515);

  // Modes button
  fill(248, 241, 229);
  if (currentSelectedIndex == 1) {
    fill(255);
  }
  rect(200, 480, 140, 60, 10, 10, 10, 10);
  fill(159, 96, 156);
  text("Modes", 245, 515);

  // tools button
  fill(248, 241, 229);
  if (currentSelectedIndex == 2) {
    fill(255);
  }
  rect(380, 480, 140, 60, 10, 10, 10, 10);
  fill(159, 96, 156);
  text("Tools", 430, 515);

  // examples button
  fill(248, 241, 229);
  if (currentSelectedIndex == 3) {
    fill(255);
  }
  rect(560, 480, 140, 60, 10, 10, 10, 10);
  fill(159, 96, 156);
  text("Examples", 595, 515);

  textFont(font, 26);
  text("Usage Statistics of Processing", 370, 35);
}

void mousePressed() {

  ArrayList<Data> currentDataList = null;
  if (currentSelectedIndex == 0) {
    currentDataList = libraries;
  } else if (currentSelectedIndex == 1) {
    currentDataList = modes;
  } else if (currentSelectedIndex == 2) {
    currentDataList = tools;
  } else if (currentSelectedIndex == 3) {
    currentDataList = examples;
  }

  if (centerX - semiR <= mouseX && centerX + semiR >= mouseX &&
    centerY - semiR <= mouseY && centerY + semiR >= mouseY) {
    // delete all the information text on the right

    fill(248, 241, 229);
    rect(informationX, 20, 600, 200);

    int vecX = mouseX - centerX;
    int vecY = mouseY - centerY;
    PVector vec = new PVector(vecX, vecY);

    float vecHeading = vec.heading();

    if (vecHeading < 0) {
      vecHeading += radians(360);
    }

    for (int i = 0; i<currentDataList.size(); i++) {
      Data currentLib = currentDataList.get(i);
      currentLib.mouseOver = false; // default value
      if (vecHeading >= currentLib.startAngle && vecHeading < currentLib.finishAngle) {
        currentLib.mouseOver = true;
      }
    }
  } else if (mouseX > informationRightX && mouseY >= 125 && mouseY <= 150) {
    // go to website

    for (int i = 0; i<currentDataList.size(); i++) {
      Data currentLib = currentDataList.get(i);
      if (currentLib.mouseOver) {
        link(currentLib.libraryUrl);
      }
    }
  } else if (mouseX >= 20 && mouseX <= 160 && mouseY >= 480 && mouseY <= 540) {
    currentSelectedIndex = 0;
  } else if (mouseX >= 200 && mouseX <= 340 && mouseY >= 480 && mouseY <= 540) {
    currentSelectedIndex = 1;
  } else if (mouseX >= 380 && mouseX <= 520 && mouseY >= 480 && mouseY <= 540) {
    currentSelectedIndex = 2;
  } else if (mouseX >= 560 && mouseX <= 700 && mouseY >= 480 && mouseY <= 540) {
    currentSelectedIndex = 3;
  } else {

    for (int i = 0; i<currentDataList.size(); i++) {
      Data currentData = currentDataList.get(i);
      currentData.mouseOver = false;
    }
  }
}

void showSelectedMode(ArrayList<Data> datas) {

  noStroke();

  // clear screen
  fill(248, 241, 229);
  rect(0, 0, width, height);


  fill(159, 96, 156);
  //text(uniqueUserTable.getString(0, 0), 20, 25);

  float lastAngle = 0;

  for (int i = 0; i<datas.size(); i++) {    
    int colorIndex = i % colorsSize;
    fill(colors[colorIndex]);

    Data currentLibrary = datas.get(i);
    int currentC = currentLibrary.libraryCounter;
    float angle = map(currentC, 0, totalCounters[currentSelectedIndex], 0, 360);

    if (currentLibrary.mouseOver) {

      String cName = currentLibrary.libraryName;
      String cUrl = currentLibrary.libraryUrl;

      // show informations

      textFont(font, 24);
      text(cName, informationX, 70);

      stroke(colors[colorIndex]);
      strokeWeight(4);
      line(informationX, 78, 880, 78);

      textFont(font, 16);

      text("Rank:", informationX, 100);
      text("#" + (i+1), informationRightX, 100);

      text("Number of users:", informationX, 125);
      text(currentC, informationRightX, 125);

      text("URL:", informationX, 150);
      text(cUrl, informationRightX, 150);

      fill(255);
      noStroke();
    }

    arc(centerX, centerY, r, r, lastAngle, lastAngle + radians(angle));

    currentLibrary.startAngle = lastAngle;
    lastAngle += radians(angle);
    currentLibrary.finishAngle = lastAngle;
    

   /* if (currentC > 2500) {

      float theta = lastAngle + radians(angle) / 2;
      float textX = centerX + (semiR * cos(theta));
      float textY = centerY + (semiR * sin(theta));
      textFont(font, 12);
      fill(159, 96, 156);

      float marginX = 5;
      float marginY = 10;
      text(currentLibrary.libraryName, textX + marginX, textY + marginY); 

      stroke(255);
      strokeWeight(2);
      line(textX + marginX, textY + marginY, textX + marginX +  15 * cos(theta), 
        textY + marginY + 15 * sin(theta));
      noStroke();
    } */
  }
}

void loadDataToList(ArrayList<Data> datas, Table table, int othersSize, int index) {

  int otherIndex = -1;

  for (int row = 0; row < table.getRowCount(); row++) {
    String lName = table.getString(row, 0);
    int lCount = table.getInt(row, 1);
    String lUrl = table.getString(row, 2);
    totalCounters[index] += lCount;


    if (lCount < othersSize) {

      if (otherIndex == -1) {
        datas.add(new Data("Others", lCount, "No URL!"));
        otherIndex = datas.size() - 1;
      } else {
        Data otherLib = datas.get(otherIndex);
        otherLib.libraryCounter += lCount;
      }
    } else {
      datas.add(new Data(lName, lCount, lUrl));
    }
  }
}
